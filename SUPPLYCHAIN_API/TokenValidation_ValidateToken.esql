
DECLARE TOKENDETAILS SHARED ROW;

CREATE COMPUTE MODULE TokenValidation_ValidateToken
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		 --CALL CopyEntireMessage();
		 DECLARE IPAddress,Token CHARACTER;
--		 SET IPAddress=COALESCE(InputRoot.HTTPInputHeader."X-Remote-Addr");
		 SET IPAddress=COALESCE(InputRoot.HTTPInputHeader."X-Forwarded-For");
		 SET Token	=	COALESCE(InputRoot.HTTPInputHeader.Authtoken,'');
		 IF Token='' THEN
		 	THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 3001 VALUES('Please provide the Authtoken') ;
		 END IF;
		 IF COALESCE(TOKENDETAILS.{InputRoot.HTTPInputHeader."X-Forwarded-For"}.TokenTimestamp,CURRENT_TIMESTAMP)=CURRENT_TIMESTAMP THEN
		 	THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 3001 VALUES('Invalid/Expired Token ') ;
		 END IF;
		 IF TOKENDETAILS.{InputRoot.HTTPInputHeader."X-Forwarded-For"}.TokenTimestamp+INTERVAL '50' MINUTE < CURRENT_TIMESTAMP THEN
		 	THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 3001 VALUES('Token Expired') ;
		 ELSE
		 	IF TOKENDETAILS.{InputRoot.HTTPInputHeader."X-Forwarded-For"}.Token<>Token THEN
		 		THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 3001 VALUES('Invalid Token') ;
		 	END IF;
		 	
		 END IF;
		-- CO
		
		 /*
		 --Check for the first time
		 IF NOT EXISTS(TOKENDETAILS.IPAddress.[]) THEN
		 	SET TOKENDETAILS.INFO[]=SELECT * FROM Database.ESB.TOKEN_DETAILS AS A WHERE A.IPADDRESS=IPAddress;
		 	IF NOT EXISTS(TOKENDETAILS.INFO[]) THEN
		 		THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2001 VALUES('Unauthorized Access') ;
		 	END IF;
		 END IF;
		
		IF CAST(TOKENDETAILS.INFO.CREATIONTIME AS TIMESTAMP FORMAT 'yyyy-MM-dd HH:mm:ss.SSS')+INTERVAL '10' MINUTE<=CURRENT_TIMESTAMP THEN
			SET TOKENDETAILS.INFO	=	NULL;
		 	SET TOKENDETAILS.INFO[]=SELECT * FROM Database.ESB.TOKEN_DETAILS AS A WHERE A.IPADDRESS=IPAddress;		 	
		 	IF NOT EXISTS(TOKENDETAILS.INFO[]) THEN
		 		THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2001 VALUES('Unauthorized Access') ;
		 	ELSE
		 		IF CAST(TOKENDETAILS.INFO.CREATIONTIME AS TIMESTAMP FORMAT 'yyyy-MM-dd HH:mm:ss.SSS')+INTERVAL '10' MINUTE<=CURRENT_TIMESTAMP THEN
		 			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2001 VALUES('Token Expired') ;
		 		ELSE	
			 		IF TOKENDETAILS.INFO.TOKEN<>COALESCE(Token,'') THEN
			 		 	THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2001 VALUES('Invalid Token') ;
			 		END IF;
		 		END IF;
			 		
		 	END IF;
		 	
		ELSE 
			IF TOKENDETAILS.INFO.TOKEN<>COALESCE(Token,'') THEN
		 		 THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2001 VALUES('Invalid Token') ;
		 	END IF;
		
		END IF;
		
		*/
--		SET Environment.EncryptedData=encryptBase64 ( jksFilePath,toEncrypt, aliasName, storePw);
		DECLARE jksFilePath,aliasName,storePw,PrivateKeyPwd,todecrypt CHARACTER;
		--SET jksFilePath='/gpfsbrk/skebrk1/brk/keystore/stanbic-test-keystore.jks';
		SET jksFilePath='D:\\Certificates\\stanbic-test-keystore.jks';
		SET aliasName='stanbic-test';
		SET storePw='123456';
		Set PrivateKeyPwd='123456';
		SET todecrypt=CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID 1208);
	SET Environment.DecryptedData=decryptBase64 (jksFilePath,todecrypt ,aliasName,storePw , PrivateKeyPwd );
		--SET Environment.EncryptedData=encryptBase64 ( jksFilePath,BASE64ENCODE('abc'), aliasName, storePw);
		SET Environment.InputPayload=	CAST(BASE64DECODE(Environment.DecryptedData) AS BLOB CCSID 1208);
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON' PARSE (Environment.InputPayload);
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
