

CREATE COMPUTE MODULE CRBAConsumer_Request
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		SET Environment.Variables.Logging.LogType='LogDebug';
		SET Environment.Variables.Logging.ReferenceId=InputRoot.JSON.Data.ReferenceId;
		SET Environment.Variables.Logging.Channel=InputRoot.JSON.Data.Channel;
		SET Environment.Variables.Logging.Operation=InputLocalEnvironment.REST.Input.Operation;
		SET Environment.Variables.Logging.BackendSystem='CRBA';
		
		SET Environment.Variables.Request.Name = 'CRBA';
		CREATE LASTCHILD OF OutputRoot DOMAIN 'SOAP';
		SET OutputRoot.HTTPRequestHeader."Authorization" = 'Basic '||base64Encode(CAST(authUsername||':'||authPassword as BLOB CCSID InputRoot.Properties.CodedCharSetId));
		SET OutputRoot.SOAP.Body.ns:getProduct109.username     = username;
		SET OutputRoot.SOAP.Body.ns:getProduct109.password     = password;
		SET OutputRoot.SOAP.Body.ns:getProduct109.code         = code;
		SET OutputRoot.SOAP.Body.ns:getProduct109.infinityCode = infinityCode;
		SET OutputRoot.SOAP.Body.ns:getProduct109.name1        = InputRoot.JSON.Data.Name1;
		SET OutputRoot.SOAP.Body.ns:getProduct109.name2        = InputRoot.JSON.Data.Name2;
		DECLARE idType CHARACTER InputRoot.JSON.Data.IdType;
			CASE idType					
				WHEN 'NationalID' THEN
					SET OutputRoot.SOAP.Body.ns:getProduct109.nationalID  = InputRoot.JSON.Data.IdNumber;
				WHEN 'PassportNo' THEN
					SET OutputRoot.SOAP.Body.ns:getProduct109.passportNo  = InputRoot.JSON.Data.IdNumber;
				WHEN 'ServiceID' THEN
					SET OutputRoot.SOAP.Body.ns:getProduct109.serviceID   = InputRoot.JSON.Data.IdNumber;
				WHEN 'AlienID' THEN
					SET OutputRoot.SOAP.Body.ns:getProduct109.alienID     = InputRoot.JSON.Data.IdNumber;
				WHEN 'TaxID' THEN
					SET OutputRoot.SOAP.Body.ns:getProduct109.taxID       = InputRoot.JSON.Data.IdNumber;		
			END CASE;
	
		SET OutputRoot.SOAP.Body.ns:getProduct109.reportSector = InputRoot.JSON.Data.ReportSector;
		SET OutputRoot.SOAP.Body.ns:getProduct109.reportReason = InputRoot.JSON.Data.ReportReason;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
